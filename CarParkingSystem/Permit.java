import java.util.Hashtable;
import java.util.Set;

/* Generated by Together */

/**
 * Abstract superclass of all permit types. Note that since this class is
 * abstract, all "instances" of it are actually instances of its concrete
 * subclasses. The vehicles permitted entry by this permit are recorded here in
 * the permittedVehicles attribute. Further information could be recorded here,
 * such as contact details for the permit holder (and for the hosts in Regular
 * and Day visitor subclasses), but in this design these details are not
 * required. Note that no permit holder may have more than one permit at any
 * time, so no two instances of Permit (through its concrete sub-classes) may
 * have the same permit holder name. There is no direct notation for this.
 * Instead the Permit list object collecting the Permit must enforce it by
 * checking new additions (a hash table will help with this).
 *
 * For subclasses with dates: No permits are issued to span from one year into
 * the next; instead re-issue occurs "automatically" at the start of the year
 * (see the Timer use case diagram - follow hyperlink) - all permits are simply
 * carried over to the new year (except Day visitor and Regular visitor permits
 * that expire on the last day of the year). Permits which have a limited period
 * of validity (Day visitor and Regular visitor permits) are automatically
 * cancelled from PACSUS at the start of the day following their last valid day.
 */
abstract public class Permit {
	/**
	 * The name of the permit holder
	 */
	private String permitHolder;
	
	protected Date currentDate;

	/**
	 * Counts the number of days on which the campus was entered while the access
	 * barriers were in operation. Counting starts when the permit is issued, and
	 * afresh at the start of each year.
	 */
	private int noOfEntries = 0;

	/**
	 * Counts the number of warnings issued to vehicles registered on this permit.
	 */
	private int warnings = 0;

	/**
	 * False if the permit has not been suspended, and true if it has (on the third
	 * warning).
	 */
	private boolean suspended = false;
	
	private boolean permitted = false;
	/**
	 * Set to false at the start of each day. Remains false until first entry of a
	 * vehicle on this permit, when it is set true, and the vehicle is noted in
	 * vehicleUsed. Used for checking that subsequent entries in the day are the
	 * same vehicle (since exits are not monitored).
	 */
	private boolean enteredToday = false;

	/**
	 * Once a vehicle has entered on this permit on any day, this attribute records
	 * the vehicle that entered, so that any subsequent entries associated with this
	 * permit can be verified as the same vehicle (or at least with the same
	 * registration number!). The attribute will be null until a vehicle has
	 * entered.
	 * 
	 * @clientCardinality 1
	 * @directed true
	 * @label Allowed today
	 * @supplierCardinality 0..1
	 */
	protected Vehicle_info vehicleUsedToday;

	/**
	 * This holds references to all the Vehicle_info instances for the vehicles
	 * registered to this permit. Note that any vehicle can be registered to only
	 * one permit, but many vehicles may be registered to the same permit. This
	 * attribute must be implemented by a collection data structure (such as array,
	 * hash table,...).
	 * 
	 * @clientCardinality 1
	 * @directed true
	 * @label Controls access of
	 * @supplierCardinality 0..*
	 */
	private Hashtable<String, Vehicle_info> permittedVehicles;

	public Permit(String name, Date currentDate) {		
		this.permitHolder = name;
		this.currentDate = currentDate;
		permittedVehicles = new Hashtable<>();
	}

	/**
	 * These are abstract methods which must be implemented in each sub class of Permit 
	 */
	abstract public void newDayUpdate();
	abstract public void newYearUpdate();
	
	/**
	 * Get the name of the permit holder
	 * 
	 * @return String	The name of the permit holder 
	 */
	public String getPermitHolder() { 
		return this.permitHolder;
	}
	
	/**
	 * Get the number of warnings on this permit
	 * 
	 * @return int		The number of warnings 
	 */
	public int getWarnings() {
		return this.warnings;
	}
	
	/**
	 * Get the number of vehicles granted access by this permit this year
	 * 
	 * @return int		The number accesses this year 
	 */
	public int getNumberOfEntries() {
		return this.noOfEntries;
	}
	
	/**
	 * Returns a boolean indicating if this permit is suspended
	 * 
	 * @return boolean		true if the permit is suspended 
	 */
	public boolean isSuspended() { 
		return this.suspended;
	}
	
	/**
	 * Returns a boolean indicating if this permit is permitted entry today
	 * 
	 * @return boolean		true if the permit is permitted 
	 */
	public boolean isPermitted() {
		return this.permitted;
	}
	
	/**
	 * Sets a boolean indicating if this permit is permitted entry today
	 * 
	 * @param boolean:b		set true if vehicle is permitted today 
	 */
	public void setPermitted(boolean b) {
		this.permitted = b;
	}
	
	/**
	 * Returns a boolean indicating if a vehicle has entered using the permit today
	 * 
	 * @return boolean		true if a vehicle has entered 
	 */
	public boolean hasEntered() { 
		return this.enteredToday;
	}

	/**
	 * Sets a boolean indicating if a vehicle has entered using the permit today
	 * 
	 * @param boolean:b		set true if a vehicle has entered 
	 */
	public void setEntered(boolean b) 
	{
		enteredToday = b;
	}
	
	/**
	 * Increases the number of vehicle entries carried out using this permit
	 */
	public void addEntry() { 
			noOfEntries++;
	}
	
	/**
	 * Resets the number of vehicle entries carried out using this permit
	 */
	public void clearEntries() { // clears any entries made on a permit 
		noOfEntries = 0;
	}
	
	/**
	 * Takes a vehicle and a registration/key and adds that vehicle to the 
	 * list of permitted vehicles this permit can allow/authenticate.
	 * 
	 * @param String:regNo			The registration/key for this vehicle in the list
	 * @param Vehicle_info:vInfo	The reference to the vehicle being added 
	 */
	public void setPermittedVehicle(String regNo, Vehicle_info vInfo) {
		permittedVehicles.put(regNo, vInfo);
	}
	
	/**
	 * Takes a registration/key and removes that vehicle from the list of 
	 * permitted vehicles this permit can allow/authenticate.
	 * 
	 * @param String:regNo			The registration/key for this vehicle in the list 
	 */
	public void removePermittedVehicle(String regNo) {
		permittedVehicles.remove(regNo);
	}
	
	/**
	 * Takes a registration/key and retrieves a reference to that vehicle from 
	 * the list of permitted vehicles this permit can allow/authenticate.
	 * 
	 * @param String:regNo			The registration/key for this vehicle in the list
	 * 
	 * @return Vehicle_info			The reference to the vehicle found in the list 
	 */
	public Vehicle_info getPermittedVehicle (String regNo) {
		return permittedVehicles.get(regNo);
	}
	
	/**
	 * Takes a registration/key and retrieves the vehicle reference of that 
	 * registration from the permitted vehicles list. It then assigns 
	 * the vehicleUsedToday as the vehicle retrieved from the list.
	 * 
	 * @param String:regNo			The registration/key for this vehicle to be assigned 
	 */
	public void setVehicleUsedToday(String regNo) {
		vehicleUsedToday = permittedVehicles.get(regNo);
	}
	
	/**
	 * Returns a reference to the vehicle which has been used today by this permit
	 * 
	 * @return Vehicle_info			A reference to the vehicle stored in vehicleUsedToday 
	 */
	public Vehicle_info getVehicleUsedToday() {
		return vehicleUsedToday;
	}
	
	/**
	 * Returns a set of Strings which are the registrations/keys to every vehicle from the list of 
	 * permitted vehicles this permit can allow/authenticate.
	 * 
	 * @return Set<String>		The set of all registrations/keys 
	 */
	public Set<String> getPermittedVehicleKeys() {
		
		return permittedVehicles.keySet();
	}
	
	/**
	 * Add a warning to this permit, if there are 3 warnings suspend permit.
	 */
	public void addWarning() { 
		if (warnings < 3) {
			warnings++;
		}
		if (warnings == 3) {
			suspended =  true;
		}
	}
	
	/**
	 * Remove a warning from this permit and set to be not suspended
	 */
	public void removeWarning() { 
		if (warnings > 0) {
			warnings--;
			suspended = false;
		}
	}
	
	/**
	 * Clear all warnings from this permit and set to be not suspended
	 */
	public void clearWarnings() { 
		warnings = 0;
		suspended = false;
	}
	
	/**
	 * Set the vehicle used today to null;
	 */
	public void clearVehicleUsedToday() {
		vehicleUsedToday = null;
	}

}
