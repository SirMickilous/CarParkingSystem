import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextArea;
import javax.swing.JTextField;

/* Generated by Together */

/**
 * The Campus security staff actually activate and deactivate the barriers,
 * enter warnings for vehicles breaching the parking regulations and monitor the
 * state of the barrier system. This class represents the interactive interface
 * to these functions. Information about these functions is in the Campus
 * security use case diagram (hyperlinked from this class). The interface
 * comprises one screen with the various functions present on it, all on view at
 * once since there aren't many. There could be several instances of this class:
 * one in the central security office, and one at each entrance to the
 * University (in a staffed booth). The class implements Observer, and observes
 * the system status so that it can keep the displayed information up to date
 * (current date, barriers active or not, log of entries through the barriers).
 * 
 * @stereotype boundary
 */
@SuppressWarnings("deprecation")
public class Campus_security extends JFrame implements Observer
{
	/**
	 * Each instance of Campus_security has a navigable association to the vehicle
	 * list so that warnings can be recorded on the permit for vehicles that breach
	 * parking regulations. Note that this process goes via the vehicle list as the
	 * only information available about such a vehicle is its registration number.
	 * 
	 * @clientCardinality 1..*
	 * @supplierCardinality 1
	 * @label Record warning
	 * @directed
	 */
	private Vehicle_list lnkVehicle_list;

	/**
	 * Each instance of Campus_security has a navigable association to the system
	 * status so that it can both find out status information about the system, and
	 * send controlling messages to the system status (to activate/deactivate the
	 * system).
	 * 
	 * @clientCardinality 1..*
	 * @supplierCardinality 1
	 * @label Control/monitor
	 * @directed
	 */
	private System_status lnkSystem_status;

	String title;

	public JButton activateBS;
	public JButton deactivateBS;
	public JButton recordWarning;
	public JButton checkLog;

	public JTextField registrationNo;
	public JLabel regNoTitle;
	public JTextArea logs;
	public JLabel logsTitle;

	public Campus_security(System_status sS, Vehicle_list vL)
	{

		this.lnkSystem_status = sS;
		this.lnkVehicle_list = vL;

		sS.addObserver(this);

		initializeGUI();
	}

	private void initializeGUI()
	{
		// set up content pane
		title = "Campus Security |\t\t Date: " + lnkSystem_status.getDate();

		setResizable(false);
		setTitle(title);
		setSize(500, 400);
		setLocation(100, 100);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		Container window = getContentPane();
		window.setLayout(new FlowLayout(FlowLayout.LEADING, 20, 20));

		// set up button to activate barrier system
		activateBS = new JButton("Activate Barrier System");
		activateBS.setBackground(Color.BLACK);
		activateBS.setForeground(Color.WHITE);
		activateBS.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent arg0)
			{
				lnkSystem_status.setSystemStatus(true);

			}
		});

		// set up button to deactiabe the barrier system
		deactivateBS = new JButton("Deactivate Barrier System");
		deactivateBS.setBackground(Color.BLACK);
		deactivateBS.setForeground(Color.WHITE);
		deactivateBS.addActionListener(new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent arg0)
			{
				lnkSystem_status.setSystemStatus(false);
			}
		});
		
		regNoTitle = new JLabel("Registration: ");
		registrationNo = new JTextField("", 20);
		registrationNo.setPreferredSize(new Dimension(20, 20));

		recordWarning = new JButton("Record Warning");
		recordWarning.setBackground(Color.BLACK);
		recordWarning.setForeground(Color.WHITE);
		recordWarning.addActionListener(new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent arg0)
			{
				// TODO - Issue a warning to the registration in field registrationNo
			}
		});

		// set up the text field to display the logs and the button associated with
		logs = new JTextArea();
		logs.setPreferredSize(new Dimension(300, 200));

		checkLog = new JButton("Check Log");
		checkLog.setBackground(Color.BLACK);
		checkLog.setForeground(Color.WHITE);
		checkLog.addActionListener(new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent arg0)
			{
				if (lnkSystem_status.getSystemStatus() == true) 
				{
					if (lnkVehicle_list.getTableSize() == 0)
					{
						logs.setText("No Vehicles in System");
					}
					else
					{
						logs.setText(lnkSystem_status.getLog());
					}
				}
				else 
				{
					logs.setText("System inactive");
				}
			}
		});

		window.add(activateBS);
		window.add(deactivateBS);
		window.add(regNoTitle);
		window.add(registrationNo);
		window.add(recordWarning);
		window.add(checkLog);
		window.add(logs);

		setVisible(true);
	}
        
	@Override
	public void update(Observable arg0, Object arg1)
	{
		int dayNumber = lnkSystem_status.getDate();
		title = "Campus Security |\t\t Date: " + dayNumber;
		setTitle(title);
		logs.setText(lnkSystem_status.getLog());

	}
}
