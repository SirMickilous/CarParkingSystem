import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import java.util.Set;

import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;

/* Generated by Together */
/**
 * This class represents the interactive interface to PACSUS administration
 * functions carried out in the Estates and Campus Services Office. Information
 * about these functions is in the Administration use case diagram (hyperlinked
 * from this class).
 *
 * The interface comprises one screen with all the functions present on it: they
 * could all be on view at once, or perhaps in alternative JPanels (in a JFrame
 * with JTabbedPane); the current date (day number) is always displayed.
 *
 * There could be any number of instances of this class, potentially one for
 * each workstation in the office, with different staff carrying different
 * functions.
 *
 * The class implements Observer, and observes the system status so that it can
 * keep the displayed current date correct.
 * 
 * @stereotype boundary
 */
public class Administration_office extends JFrame implements Observer
{
	/**
	 * Each instance of Administration_office has a navigable association to the
	 * permit list so that it can enquire about/add/delete/modify permits.
	 * 
	 * @supplierCardinality 1
	 * @clientCardinality 1..*
	 * @label Administration functions
	 * @directed
	 */

	private Permit_list lnkPermit_list;

	/**
	 * Each instance of Administration_office has a navigable association to the
	 * vehicle list so that it can enquire about/add/delete/modify vehicle details.
	 * 
	 * @clientCardinality 1..*
	 * @supplierCardinality 1
	 * @label Administration functions
	 * @directed
	 */
	private Vehicle_list lnkVehicle_list;

	/**
	 * Each instance of Administration_office has a navigable association to the
	 * system status so that it can find out status information about the system.
	 * 
	 * @clientCardinality 1..*
	 * @supplierCardinality 1
	 * @label See date
	 * @directed
	 */
	private System_status lnkSystem_status;

	String title;

	// this variable list is finna be LONG! so im gonna divide it up into the
	// different panels!

	// add permit variables
	private String[] permitTypes =
	{ "Day Visitor", "Regular Visitor", "Permanent Visitor", "University Member" };
	private JLabel nameLabel, regLabel, makeLabel, modelLabel, colourLabel, permitLabel, date1Label, date2Label, hostLabel;
	private JTextField nameField, regField, makeField, modelField, colourField, date1Field, date2Field, hostField;
	private JComboBox<String> permitList;
	private JButton submitPermitBtn;

	// record warning variables
	private JLabel wRegLabel;
	private JTextField wRegField;
	private JButton recordWarningBtn;

	// delete warning variables
	private JLabel dRegLabel, dWarningLabel;
	private JTextField dRegField, dWarningField;
	private JButton showWarningBtn, deleteWarningBtn;

	// cancel permit variables
	private JLabel cNameLabel;
	private JTextField cNameField;
	private JButton cancelPermitBtn;

	// status enquiry variables
	private JLabel eNameLabel, ePermitLabel, eWarningLabel, eSuspendedLabel, eNumEntriesLabel;
	private JTextField eNameField, ePermitField, eWarningField, eSuspendedField, eNumEntriesField;
	private JButton statEnquiryBtn;

	// modifyPermit variables

	private DefaultListModel<String> listModel = new DefaultListModel<String>();
	private JList<String> modifyVehicleList;
	private JLabel mNameLabel, mStartDateLabel, mEndDateLabel, mRegLabel;
	private JTextField mNameField, mStartDateField, mEndDateField, mRegField;
	private JButton addVehicleBtn, removeVehicleBtn, searchPermitBtn, modifyStartDateBtn, modifyEndDateBtn;
	private String mName, permitType = "";
	private int origStartDate, origEndDate;
	private Day_visitor_permit dPermit;
	private Regular_visitor_permit rPermit;

	// regex variables
	private String nameRegex = "^[a-z,A-Z ,.'-]+$";
	private String numberRegex = "^[0-9]*$";
	private String registrationRegex = "^[A-Z]{2}[0-9]{2}[ ][A-Z]{3}$";

	public Administration_office(System_status sS, Vehicle_list vL, Permit_list pL)
	{

		this.lnkSystem_status = sS;
		this.lnkVehicle_list = vL;
		this.lnkPermit_list = pL;

		sS.addObserver(this);
		initializeGUI();
	}

	private void initializeGUI()
	{
		title = "Administration |\t\t Date: " + lnkSystem_status.getDate();
		setTitle(title);
		setLocation(700, 100);
		setSize(660, 400);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setResizable(false);

		// setting up a tabulated pane which requires several different panes to be
		// added to it
		JTabbedPane adminTabs = new JTabbedPane();
		adminTabs.setBackground(Color.LIGHT_GRAY);

		// set up each individual panel
		
		// --------------------------------------------------------------------------------------

		// panel which contains components for adding a permit
		JPanel permitPanel = new JPanel();
		permitPanel.setLayout(new GridLayout(12, 2));
		permitPanel.setBackground(Color.LIGHT_GRAY);

		// creating all components to be added to the panel

		// create labels
		nameLabel = new JLabel("Name: ");
		regLabel = new JLabel("Registration: ");
		makeLabel = new JLabel("Car Make: ");
		modelLabel = new JLabel("Car Model: ");
		colourLabel = new JLabel("Car Colour: ");
		permitLabel = new JLabel("Select Permit Type: ");
		date1Label = new JLabel("Date of Visit: ");
		date2Label = new JLabel("N/A: ");
		hostLabel = new JLabel("Host Name: ");

		// create TextFeilds & single combobox
		nameField = new JTextField();
		nameField.setPreferredSize(new Dimension(150, 24));
		regField = new JTextField();
		regField.setPreferredSize(new Dimension(150, 24));
		makeField = new JTextField();
		makeField.setPreferredSize(new Dimension(150, 24));
		modelField = new JTextField();
		modelField.setPreferredSize(new Dimension(150, 24));
		colourField = new JTextField();
		colourField.setPreferredSize(new Dimension(150, 24));
		permitList = new JComboBox<String>(permitTypes);
		permitList.setPreferredSize(new Dimension(150, 24));
		permitList.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent arg0)
			{
				if (permitList.getSelectedItem() == permitTypes[0])
				{
					date1Label.setText("Start Date: ");
					date1Label.setForeground(Color.black);
					date2Label.setText("N/A: ");
					date2Label.setForeground(Color.black);
					hostLabel.setText("Host Name: ");
					hostLabel.setForeground(Color.black);
					date1Field.setText("");
					date1Field.setEnabled(true);
					date2Field.setText("");
					date2Field.setEnabled(false);
					hostField.setText("");
					hostField.setEnabled(true);
				}				
				if (permitList.getSelectedItem() == permitTypes[1])
				{
					date1Label.setText("Start Date: ");
					date1Label.setForeground(Color.black);
					date2Label.setText("End Date: ");
					date2Label.setForeground(Color.black);
					hostLabel.setText("Host Name: ");
					hostLabel.setForeground(Color.black);
					date1Field.setText("");
					date1Field.setEnabled(true);
					date2Field.setText("");
					date2Field.setEnabled(true);
					hostField.setText("");
					hostField.setEnabled(true);
				}
				if (permitList.getSelectedItem() == permitTypes[2] || permitList.getSelectedItem() == permitTypes[3])
				{
					date1Label.setText("N/A: ");
					date1Label.setForeground(Color.black);
					date2Label.setText("N/A: ");
					date2Label.setForeground(Color.black);
					hostLabel.setText("N/A: ");
					hostLabel.setForeground(Color.black);
					date1Field.setText("");
					date1Field.setEnabled(false);
					date2Field.setText("");
					date2Field.setEnabled(false);
					hostField.setText("");
					hostField.setEnabled(false);
				}
			}
		});
		date1Field = new JTextField();
		date1Field.setPreferredSize(new Dimension(150, 24));
		date2Field = new JTextField();
		date2Field.setPreferredSize(new Dimension(150, 24));
		date2Field.setEnabled(false);
		hostField = new JTextField();
		hostField.setPreferredSize(new Dimension(150, 24));

		// create button for submitting
		submitPermitBtn = new JButton("Submit");
		submitPermitBtn.setPreferredSize(new Dimension(100, 24));
		submitPermitBtn.setBackground(Color.BLACK);
		submitPermitBtn.setForeground(Color.WHITE);
		submitPermitBtn.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent arg0)
			{
				/*--------------Name Validation-------------------*/
				String name = nameField.getText();// get the text from the field
				boolean nameValid = false;
				boolean permitExist = true;

				nameValid = checkRegex(name, nameLabel, nameRegex);
				permitExist = lnkPermit_list.checkForPermit(name);

				/*--------------Reg Validation-------------------*/
				String reg = regField.getText();
				boolean regValid = false;
				boolean vehicleExist = true;

				regValid = checkRegex(reg, regLabel, registrationRegex);
				vehicleExist = lnkVehicle_list.checkForVehicle(reg);

				/*--------------Make Validation-------------------*/

				// boolean makeValid = checkRegex(makeField.getText(), makeLabel, nameRegex);

				/*--------------Model Validation-------------------*/

				// boolean modelValid = checkRegex(modelField.getText(), modelLabel, nameRegex);

				/*--------------Model Validation-------------------*/
			
				// boolean colourValid = checkRegex(colourField.getText(), colourLabel, nameRegex);

				/*--------------Check Permit Type-------------------*/

				if (permitList.getSelectedItem() == permitTypes[0])
				{// if its a day visitor

					/*--------------Check Date-------------------*/
					
					boolean visitValid = isValidDate(date1Field, date1Label);

					/*--------------Check Host Name-------------------*/

					String hostName = hostField.getText();
					boolean hostValid = false;
					hostValid = checkRegex(hostName, hostLabel, nameRegex);

					if (nameValid && regValid && visitValid && hostValid && !permitExist && !vehicleExist)
					{
						addPermit(reg, name, hostName, Integer.parseInt(date1Field.getText()));
					}
				}
				else if (permitList.getSelectedItem() == permitTypes[1])
				{
					boolean startValid = isValidDate(date1Field, date1Label);
					boolean endValid = isValidDate(date2Field, date2Label);
					
					String hostName = hostField.getText();
					boolean hostValid = false;
					hostValid = checkRegex(hostName, hostLabel, nameRegex);

					if (nameValid && regValid && startValid && endValid &&hostValid && !permitExist && !vehicleExist)
					{
					
						addPermit(reg, name, hostName, Integer.parseInt(date1Field.getText()), Integer.parseInt(date2Field.getText()));
					
					}
				}
				
				else if(permitList.getSelectedItem() == permitTypes[2]) 
				{
					/*--------------No Extra Checks Necessary Just Evaluate-------------------*/
					if (nameValid && regValid && !permitExist && !vehicleExist)
					{
						addPermanentPermit(reg, name);
					}
				}
				
				else 
				{
					if (nameValid && regValid && !permitExist && !vehicleExist)
					{
						addMemberPermit(reg, name);
					}
				}
				
			}
		});

		// adding all components to the panel
		permitPanel.add(permitLabel);
		permitPanel.add(permitList);
		permitPanel.add(nameLabel);
		permitPanel.add(nameField);
		permitPanel.add(regLabel);
		permitPanel.add(regField);
		permitPanel.add(makeLabel);
		permitPanel.add(makeField);
		permitPanel.add(modelLabel);
		permitPanel.add(modelField);
		permitPanel.add(colourLabel);
		permitPanel.add(colourField);
		permitPanel.add(date1Label);
		permitPanel.add(date1Field);
		permitPanel.add(date2Label);
		permitPanel.add(date2Field);
		permitPanel.add(hostLabel);
		permitPanel.add(hostField);
		permitPanel.add(submitPermitBtn);

		// --------------------------------------------------------------------------------------

		// panel for recording a warning
		JPanel recordPanel = new JPanel();
		recordPanel.setLayout(new FlowLayout());
		recordPanel.setBackground(Color.LIGHT_GRAY);

		// create label
		wRegLabel = new JLabel("Registration: ");

		// create text field
		wRegField = new JTextField("", 20);
		wRegField.setPreferredSize(new Dimension(150, 24));

		// create button to submit a warning
		recordWarningBtn = new JButton("Record Warning");
		recordWarningBtn.setPreferredSize(new Dimension(150, 24));
		recordWarningBtn.setBackground(Color.BLACK);
		recordWarningBtn.setForeground(Color.WHITE);
		recordWarningBtn.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				String wName = wRegField.getText();
				wName.trim();
				if (wName.equals(null)||wName.isEmpty()||wName.equals(" ")) {
					wRegLabel.setForeground(Color.RED);
					wRegField.setText("No input found");
				}
				else if (checkRegex(wName, wRegLabel, registrationRegex) == false) {
					wRegLabel.setForeground(Color.RED);
					wRegField.setText("Invalid Input");
				}
				else if (lnkVehicle_list.checkForVehicle(wName) == false) {
					wRegLabel.setForeground(Color.RED);
					wRegField.setText("Registration doesn't exist");
				}
				else if (lnkVehicle_list.getVehicle(wName) != null) {
					if (lnkVehicle_list.checkForVehicle(wName) == true && lnkVehicle_list.getVehicle(wName).getPermit().isSuspended() == false)
					{
						lnkVehicle_list.getVehicle(wName).getPermit().addWarning();
						wRegField.setForeground(Color.BLACK);
						wRegField.setText("Warning Added");		
					}
					else if (lnkVehicle_list.getVehicle(wName).getPermit().isSuspended() == true) {
						wRegField.setForeground(Color.red);
						wRegField.setText("Permit Suspended");
					}
				}
			}
		});

		// add all components to the panel
		recordPanel.add(wRegLabel);
		recordPanel.add(wRegField);
		recordPanel.add(recordWarningBtn);

		// --------------------------------------------------------------------------------------

		// panel for deleting a warning
		JPanel deletePanel = new JPanel();
		deletePanel.setLayout(new FlowLayout(FlowLayout.LEFT, 20, 20));
		deletePanel.setBackground(Color.LIGHT_GRAY);

		// create labels
		dRegLabel = new JLabel("Registration: ");
		dWarningLabel = new JLabel("Number of warnings: ");

		// create fields
		dRegField = new JTextField("", 20);
		dRegField.setPreferredSize(new Dimension(150, 24));

		// create list to display any warnings found
		dWarningField = new JTextField("");
		dWarningField.setPreferredSize(new Dimension(177, 24));
		dWarningField.setEditable(false);

		// create buttons
		showWarningBtn = new JButton("Display Warnings");
		showWarningBtn.setPreferredSize(new Dimension(200, 30));
		showWarningBtn.setBackground(Color.BLACK);
		showWarningBtn.setForeground(Color.WHITE);
		showWarningBtn.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				String dReg = dRegField.getText();
				dReg.trim();
				if (dReg.equals(null)||dReg.isEmpty()||dReg.equals(" ")) {
					dRegLabel.setForeground(Color.RED);
					dRegField.setText("No input found");
				}
				else if (checkRegex(dReg, dRegLabel, registrationRegex) == false) {
					dRegLabel.setForeground(Color.RED);
					dRegLabel.setText("Invalid Input");
				}
				else if (lnkVehicle_list.checkForVehicle(dReg) == false) {
					dRegLabel.setForeground(Color.RED);
					dRegLabel.setText("Registration doesn't exist");
				}
				else if (lnkVehicle_list.getVehicle(dReg) != null) {
					if (lnkVehicle_list.checkForVehicle(dReg) == true)
					{
						int warn = lnkVehicle_list.getVehicle(dReg).getPermit().getWarnings();
						dWarningField.setText("                           " + warn);
						dRegLabel.setForeground(Color.BLACK);
					}
				}
			}
		});

		deleteWarningBtn = new JButton("Delete Warning");
		deleteWarningBtn.setPreferredSize(new Dimension(200, 30));
		deleteWarningBtn.setBackground(Color.BLACK);
		deleteWarningBtn.setForeground(Color.WHITE);
		deleteWarningBtn.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				String dReg = dRegField.getText();
				dReg.trim();
				if (dReg.equals(null)||dReg.isEmpty()||dReg.equals(" ")) {
					dRegLabel.setForeground(Color.RED);
					dRegField.setText("No input found");
				}
				else if (checkRegex(dReg, dRegLabel, registrationRegex) == false) {
					dRegLabel.setForeground(Color.RED);
					dRegLabel.setText("Invalid Input");
				}
				else if (lnkVehicle_list.checkForVehicle(dReg) == false) {
					dRegLabel.setForeground(Color.RED);
					dRegLabel.setText("Registration doesn't exist");
				}
				else if (lnkVehicle_list.getVehicle(dReg) != null) {
					if (lnkVehicle_list.checkForVehicle(dReg) == true)
					{
						lnkVehicle_list.getVehicle(dReg).getPermit().removeWarning();
						dRegField.setText("Warning Removed");
						dRegLabel.setForeground(Color.BLACK);
					}
				}
			}
		});

		deletePanel.add(dRegLabel);
		deletePanel.add(dRegField);
		deletePanel.add(showWarningBtn);
		deletePanel.add(dWarningLabel);
		deletePanel.add(dWarningField);
		deletePanel.add(deleteWarningBtn);

		// --------------------------------------------------------------------------------------

		// panel for cancelling a permit
		JPanel cancelPanel = new JPanel();
		cancelPanel.setLayout(new FlowLayout());
		cancelPanel.setBackground(Color.LIGHT_GRAY);

		// create label
		cNameLabel = new JLabel("Name: ");

		// create field
		cNameField = new JTextField("");
		cNameField.setPreferredSize(new Dimension(150, 24));

		// create button
		cancelPermitBtn = new JButton("Cancel Permit");
		cancelPermitBtn.setPreferredSize(new Dimension(150, 24));
		cancelPermitBtn.setBackground(Color.BLACK);
		cancelPermitBtn.setForeground(Color.WHITE);
		cancelPermitBtn.addActionListener(new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent e)
			{
				String cName = cNameField.getText();
				cName.trim();
				if (cName.equals(null) || cName.isEmpty() || cName.equals(" "))
				{
					cNameLabel.setForeground(Color.RED);
					cNameField.setText("No input found");
				}
				else if (cName.matches(".*\\d.*"))
				{
					cNameLabel.setForeground(Color.RED);
					cNameField.setText("Not a valid input");
				}
				else if (lnkPermit_list.getPermit(cName) != null)
				{
					Set<String> vehicles = lnkPermit_list.removePermit(cName);
					lnkVehicle_list.removeVehicles(vehicles);
					cNameField.setText("Permit Cancelled");
					cNameLabel.setForeground(Color.BLACK);
				}

			}
		});
		cancelPanel.add(cNameLabel);
		cancelPanel.add(cNameField);
		cancelPanel.add(cancelPermitBtn);

		// --------------------------------------------------------------------------------------

		// panel for enquiring about that status of the system
		JPanel enquiryPanel = new JPanel();
		enquiryPanel.setLayout(new GridLayout(10, 2));
		enquiryPanel.setBackground(Color.LIGHT_GRAY);

		// create labels
		eNameLabel = new JLabel("Name: ");
		ePermitLabel = new JLabel("Permit Type: ");
		eWarningLabel = new JLabel("Warnings: ");
		eSuspendedLabel = new JLabel("Suspended: ");
		eNumEntriesLabel = new JLabel("Num of Entries: ");

		// create text boxes
		eNameField = new JTextField("");
		eNameField.setPreferredSize(new Dimension(150, 24));

		ePermitField = new JTextField("");
		ePermitField.setPreferredSize(new Dimension(150, 24));
		ePermitField.setEditable(false);

		eWarningField = new JTextField("");
		eWarningField.setPreferredSize(new Dimension(150, 24));
		eWarningField.setEditable(false);

		eSuspendedField = new JTextField("");
		eSuspendedField.setPreferredSize(new Dimension(150, 24));
		eSuspendedField.setEditable(false);

		eNumEntriesField = new JTextField("");
		eNumEntriesField.setPreferredSize(new Dimension(150, 24));
		eNumEntriesField.setEditable(false);

		// create button
		statEnquiryBtn = new JButton("Start Enquiry");
		statEnquiryBtn.setPreferredSize(new Dimension(150, 24));
		statEnquiryBtn.setBackground(Color.BLACK);
		statEnquiryBtn.setForeground(Color.WHITE);        
        statEnquiryBtn.addActionListener(new ActionListener() {
                  @Override
                  public void actionPerformed(ActionEvent e) {
                         String eName = eNameField.getText();
                         eName.trim();
                         if (eName.equals(null)||eName.isEmpty()||eName.equals(" ")) {
                        	 eNameLabel.setForeground(Color.RED);
                             eNameField.setText("No input found");
                         }
                         else if (eName.matches(".*\\d.*")) {
                              eNameLabel.setForeground(Color.RED);
                              eNameField.setText("Not a valid input");
                         }
                         else if (lnkPermit_list.checkForPermit(eName)) { 
                              Permit permitStatus = lnkPermit_list.getPermit(eName);   
                              String permitType = String.valueOf(permitStatus).replaceAll("_", " ");
                              String permitType2 = String.valueOf(permitType).replaceAll("@.*", "");
                              //permitType2.matches(permitRegex); // There is no permitRegex 
                              ePermitField.setText(permitType2);         
                              eNameField.setText(permitStatus.getPermitHolder());
                              eWarningField.setText(String.valueOf(permitStatus.getWarnings()) + " Warnings");
                              if (permitStatus.isSuspended()) {
                              eSuspendedField.setText("Permit is Suspended");
                              } else {
                              eSuspendedField.setText("Permit is Permitted"); 
                              }
                              eNumEntriesField.setText(String.valueOf(permitStatus.getNumberOfEntries()) + " Entrys");           
                              }
                              //Clear Text and make labels red if a permit is not found.
                              else {
                              eNameField.setText("No Permit Found");    
                              eNameLabel.setForeground(Color.RED);
                              ePermitLabel.setForeground(Color.RED);
                              eWarningLabel.setForeground(Color.RED);
                              eSuspendedLabel.setForeground(Color.RED);
                              eNumEntriesLabel.setForeground(Color.RED);
                              ePermitField.setText("");
                              eWarningField.setText("");
                              eSuspendedField.setText("");
                              eNumEntriesField.setText("");
                              }
                    }          
                });
		enquiryPanel.add(eNameLabel);
		enquiryPanel.add(eNameField);
		enquiryPanel.add(ePermitLabel);
		enquiryPanel.add(ePermitField);
		enquiryPanel.add(eWarningLabel);
		enquiryPanel.add(eWarningField);
		enquiryPanel.add(eSuspendedLabel);
		enquiryPanel.add(eSuspendedField);
		enquiryPanel.add(eNumEntriesLabel);
		enquiryPanel.add(eNumEntriesField);
		enquiryPanel.add(statEnquiryBtn);

		// --------------------------------------------------------------------------------------

		// panel for modifying a permit
		JPanel modifyPanel = new JPanel();
		modifyPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 15, 10));
		modifyPanel.setBackground(Color.LIGHT_GRAY);

		// create panel from add/remove vehicle buttons
		JPanel modifyButtonPanel = new JPanel();
		modifyButtonPanel.setLayout(new GridLayout(2, 1, 0, 20));
		modifyButtonPanel.setBackground(Color.LIGHT_GRAY);

		// create labels
		mNameLabel = new JLabel("Permit Holder Name: ");
		mStartDateLabel = new JLabel("Start Date: ");
		mEndDateLabel = new JLabel("End Date: ");
		mRegLabel = new JLabel("Reg Number: ");

		// create textfields
		mNameField = new JTextField("");
		mNameField.setPreferredSize(new Dimension(200, 24));

		mStartDateField = new JTextField("");
		mStartDateField.setPreferredSize(new Dimension(70, 24));

		mEndDateField = new JTextField("");
		mEndDateField.setPreferredSize(new Dimension(70, 24));

		mRegField = new JTextField("");
		mRegField.setPreferredSize(new Dimension(70, 24));
		
		// create list and set the model
		modifyVehicleList = new JList<>(listModel);
		modifyVehicleList.setPreferredSize(new Dimension(220,140));
		
		// create buttons
		searchPermitBtn = new JButton("Search Permit");
		searchPermitBtn.setPreferredSize(new Dimension(200, 24));
		searchPermitBtn.setBackground(Color.BLACK);
		searchPermitBtn.setForeground(Color.WHITE);
		searchPermitBtn.addActionListener(new ActionListener() 
		{
			@Override
			public void actionPerformed(ActionEvent e) 
			{
				resetModifyTab();
				
				mName = mNameField.getText();
				
				if(checkRegex(mName, mNameLabel, nameRegex) != false)
				{
					//checks the type of permit
					try
					{
						Permit p = lnkPermit_list.getPermit(mName);
						
						if(p instanceof Regular_visitor_permit == true) 
						{
							rPermit = (Regular_visitor_permit) p;
							
							permitType = "regular";
							
							origStartDate = rPermit.getStartDate();
							origEndDate = rPermit.getEndDate();
							
							mStartDateField.setText(Integer.toString(origStartDate));
							mEndDateField.setText(Integer.toString(origEndDate));
							
							setDateBtns(true);
							setVehicleBtns(true);
							displayPermitVehicles(mName);
						}
						else if (p instanceof Day_visitor_permit == true) 
						{	
							dPermit = (Day_visitor_permit) p;
							
							permitType = "day";
							
							origStartDate = dPermit.getVisitDate();
							
							mStartDateField.setText(Integer.toString(origStartDate));
							mEndDateField.setText(Integer.toString(origStartDate));
							
							setDateBtns(true);
							displayPermitVehicles(mName);
							setVehicleBtns(true);
						}
						//for permanent or university permits
						else 
						{
							displayPermitVehicles(mName);
							setVehicleBtns(true);
						}
					}
					catch(NullPointerException npe)
					{
						mNameLabel.setForeground(Color.red);
						System.out.println("Invalid or no name entered");
					}
				}
			}
		});

		addVehicleBtn = new JButton("Add Vehicle");
		addVehicleBtn.setPreferredSize(new Dimension(110, 24));
		addVehicleBtn.setBackground(Color.BLACK);
		addVehicleBtn.setForeground(Color.WHITE);
		addVehicleBtn.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e) {
				
				String mRegNum = mRegField.getText();
				
				if(checkRegex(mRegNum, mRegLabel, registrationRegex) != false)
				{
					if(lnkVehicle_list.checkForVehicle(mRegNum) == false)
					{
						if(permitType.equalsIgnoreCase("day"))
						{
							//day permit cannot have more than one car registered
							if(listModel.size() == 0)
							{
								addNewVehicle(mRegNum);
								setVehicleBtns(true);
							}
						}
						else
						{
							addNewVehicle(mRegNum);
							setVehicleBtns(true);
						}
					}
					else { mRegLabel.setForeground(Color.red); }
				}
				else { mRegLabel.setForeground(Color.red); }
			}
		});
		
		removeVehicleBtn = new JButton("Remove Vehicle");
		removeVehicleBtn.setPreferredSize(new Dimension(130, 24));
		removeVehicleBtn.setBackground(Color.BLACK);
		removeVehicleBtn.setForeground(Color.WHITE);
		removeVehicleBtn.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e) {
				
				List<String> selectedVehicles = modifyVehicleList.getSelectedValuesList();
				
				if(!selectedVehicles.isEmpty())
				{
					for(String vehicle : selectedVehicles)
					{
						if(lnkVehicle_list.checkForVehicle(vehicle))
						{
							lnkVehicle_list.removeVehicle(vehicle);
							listModel.removeElement(vehicle);
							
							//updates the buttons to reflect the change in list
							setVehicleBtns(true);
						}
					}
				}
			}
		});
		
		modifyStartDateBtn = new JButton("Change Start Date");
		modifyStartDateBtn.setPreferredSize(new Dimension(140, 24));
		modifyStartDateBtn.setBackground(Color.BLACK);
		modifyStartDateBtn.setForeground(Color.WHITE);
		modifyStartDateBtn.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e) {
				
				String enteredStartDate = mStartDateField.getText();
				
				if(checkRegex(enteredStartDate, mStartDateLabel, numberRegex) != false)
				{
					int mNewStartDate = Integer.parseInt(enteredStartDate);
					
					if(!(mNewStartDate == origStartDate))
					{
						boolean hasEdited = false;
						
						if((mNewStartDate >= 1) && (mNewStartDate <= 10))
						{
							//sets the start date for a day permit
							if(permitType.equalsIgnoreCase("day"))
							{
								dPermit.setVisitDate(mNewStartDate);
								hasEdited = true;
							}
							else if(mNewStartDate >= origEndDate)
							{
								mStartDateLabel.setForeground(Color.red);
								mStartDateField.setText(Integer.toString(origStartDate));
							}
							else 
							{	//sets the start date for a regular permit
								rPermit.setStartDate(mNewStartDate);
								hasEdited = true;
							}
								if(hasEdited != false)
								{
									mStartDateField.setText(Integer.toString(mNewStartDate));
									origStartDate = mNewStartDate;
									mStartDateLabel.setForeground(Color.GREEN);
									
									if(permitType.equalsIgnoreCase("day"))
									{
										mEndDateField.setText(Integer.toString(mNewStartDate));
									}
								}
								else { mStartDateLabel.setForeground(Color.red); }
						}
						else 
						{ 
							mStartDateLabel.setForeground(Color.red);
							mStartDateField.setText(Integer.toString(origStartDate));
						}
					}
				}
				else
				{	//if there was an error then replace with the original start date
					mStartDateField.setText(Integer.toString(origStartDate));
				}
			}
		});
		
		modifyEndDateBtn = new JButton("Change End Date");
		modifyEndDateBtn.setPreferredSize(new Dimension(140, 24));
		modifyEndDateBtn.setBackground(Color.BLACK);
		modifyEndDateBtn.setForeground(Color.WHITE);
		modifyEndDateBtn.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e) {
				
				String enteredEndDate = mEndDateField.getText();
				
				if(checkRegex(enteredEndDate, mEndDateLabel, numberRegex) != false)
				{
					int mNewEndDate = Integer.parseInt(enteredEndDate);
					
					if(!(mNewEndDate == origEndDate))
					{
						if((mNewEndDate >= 1) && (mNewEndDate <= 10))
						{
								if(mNewEndDate <= origStartDate)
								{
									mEndDateLabel.setForeground(Color.red);
									mEndDateField.setText(Integer.toString(origEndDate));
								}
								else 
								{
									rPermit.setEndDate(mNewEndDate);
									mEndDateField.setText(Integer.toString(mNewEndDate));
									origEndDate = mNewEndDate;
									mEndDateLabel.setForeground(Color.GREEN);
								}
						}
						else 
						{ 
							mEndDateLabel.setForeground(Color.red); 
							mEndDateField.setText(Integer.toString(origEndDate));
						}
					}
				}
				else
				{	//if there was an error then replace with the original end date
					mEndDateField.setText(Integer.toString(origEndDate));
				}
			}
		});
		
		// add Add vehicle and remove vehicle buttons to the button panel
		modifyButtonPanel.add(mRegLabel);
		modifyButtonPanel.add(mRegField);
		modifyButtonPanel.add(addVehicleBtn);
		modifyButtonPanel.add(removeVehicleBtn);

		// add the rest of the elements and the modify button panel to the main panel
		modifyPanel.add(mNameLabel);
		modifyPanel.add(mNameField);
		modifyPanel.add(searchPermitBtn);

		modifyPanel.add(mStartDateLabel);
		modifyPanel.add(mStartDateField);
		modifyPanel.add(modifyStartDateBtn);

		modifyPanel.add(mEndDateLabel);
		modifyPanel.add(mEndDateField);
		modifyPanel.add(modifyEndDateBtn);

		modifyPanel.add(modifyVehicleList);
		modifyPanel.add(modifyButtonPanel);

		// --------------------------------------------------------------------------------------

		// add all the panes to the tabulated table now that they're set up
		adminTabs.addTab("Add Permit", permitPanel);
		adminTabs.addTab("Record Warning", recordPanel);
		adminTabs.addTab("Delete Warning", deletePanel);
		adminTabs.addTab("Cancel Permit", cancelPanel);
		adminTabs.addTab("status Enquiry", enquiryPanel);
		adminTabs.addTab("Modify Permit", modifyPanel);

		Container window = getContentPane();

		window.add(adminTabs);

		setVisible(true);
	}

	@Override
	public void update(Observable arg0, Object arg1)
	{
		int dayNumber = lnkSystem_status.getDate();
		title = "Administration |\t\t Date: " + dayNumber;
		setTitle(title);
		if (dayNumber == 1) 
		{
			Set<String> pKeys = lnkPermit_list.aNewYear();
			if (pKeys.isEmpty() != true) {
			Set<String> vKeys = lnkPermit_list.removeAllPermits(pKeys);
			lnkVehicle_list.removeVehicles(vKeys);
			}
			lnkPermit_list.aNewDay();
		} 
		else 
		{
			lnkPermit_list.aNewDay();
		}
	}

	public void recordAWarning(Vehicle_list vL, String regNo)
	{
		if (vL.checkForVehicle(regNo) == true)
		{
			vL.getVehicle(regNo).getPermit().addWarning();
		}
	}

	public void deleteAWarning(Vehicle_list vL, String regNo)
	{
		if (vL.checkForVehicle(regNo) == true)
		{
			vL.getVehicle(regNo).getPermit().removeWarning();
		}
	}

	public void removeAPermit(Permit_list pL, String name)
	{
		if (pL.checkForPermit(name) == true)
		{
			// TO-DO need to remove all vehicles associated with this permit then delete the
			// permit from the list
		}
	}

	private boolean checkRegex(String s, JLabel l, String r)
	{
		s.trim();// trim the crap

		
		if (s.equals(null) || s.isEmpty() || s.equals(" "))
		{
			l.setForeground(Color.red);
			return false;
		}
		else if (s.matches(r))
		{
			l.setForeground(Color.black);
			return true;
		}
		else
		{
			l.setForeground(Color.red);
			return false;
		}
	}

	private boolean isValidDate(JTextField jField, JLabel jLabel) {
		
		if (checkRegex(jField.getText(), jLabel, numberRegex))
		{
			try
			{
				int i = Integer.parseInt(jField.getText());
				if (i >= 1 && i <= 10)
				{					
					jLabel.setForeground(Color.black);
					return true;
				}
				else
				{
					jLabel.setForeground(Color.red);
					return false;
				}
			}
			catch (NumberFormatException nfe)
			{
				jLabel.setForeground(Color.red);
				return false;

			}
		}
		else
		{
			jLabel.setForeground(Color.red);
			return false;	
		}
	}	

	/*
	 * used for adding a permanent visitor permit or a university member permit
	 * takes a string reg to link to the vehicle and a name to associate the permit too
	 * */
	private void addPermanentPermit(String reg, String name) 
	{
		boolean success = false;
		Permanent_visitor_permit pvp = lnkPermit_list.createPermanentVisitorPermit(name, lnkSystem_status.getDateRef());
		if (pvp == null)
		{
			JOptionPane.showMessageDialog(null, "Permit creation failed!");
		}
		else
		{
			success = lnkVehicle_list.addVehicle(reg, pvp);
			if (success)
			{
				nameField.setText("");
				regField.setText("");
				makeField.setText("");
				modelField.setText("");
				colourField.setText("");
				date1Field.setText("");
				hostField.setText("");
				JOptionPane.showMessageDialog(null, "Permit Added succesfully");
			}
			else
			{
				JOptionPane.showMessageDialog(null, "Permit created, vehicle creation failed");
			}
		}
	}
	
	private void addMemberPermit(String reg, String name) 
	{
		boolean success = false;
		University_member_permit ump = lnkPermit_list.createUniversityMemberPermit(name, lnkSystem_status.getDateRef());
		if (ump == null)
		{
			JOptionPane.showMessageDialog(null, "Permit creation failed!");
		}
		else
		{
			success = lnkVehicle_list.addVehicle(reg, ump);
			if (success)
			{
				nameField.setText("");
				regField.setText("");
				makeField.setText("");
				modelField.setText("");
				colourField.setText("");
				date1Field.setText("");
				hostField.setText("");
				JOptionPane.showMessageDialog(null, "Permit Added succesfully");
			}
			else
			{
				JOptionPane.showMessageDialog(null, "Permit created, vehicle creation failed");
			}
		}
	}
	
	
	private void addPermit(String reg, String name, String hostName, int start)
	{
		boolean success = false;
		Day_visitor_permit dvp = lnkPermit_list.createDayVisitorPermit(name, lnkSystem_status.getDateRef(), hostName, start);
		if (dvp == null)
		{
			JOptionPane.showMessageDialog(null, "Permit creation failed!");
		}
		else
		{
			success = lnkVehicle_list.addVehicle(reg, dvp);
			if (success)
			{
				nameField.setText("");
				regField.setText("");
				makeField.setText("");
				modelField.setText("");
				colourField.setText("");
				date1Field.setText("");
				hostField.setText("");
				JOptionPane.showMessageDialog(null, "Permit Added succesfully");
			}
			else
			{
				JOptionPane.showMessageDialog(null, "Permit created, vehicle creation failed");
			}
		}
	}
	
	private void addNewVehicle(String mRegNum)
	{
		boolean added = false;
		
		added = lnkVehicle_list.addVehicle(mRegNum, lnkPermit_list.getPermit(mName));
		
		if(added == true)
		{
			listModel.addElement(mRegNum);
			mRegLabel.setForeground(Color.green);
			mRegField.setText("");
		}
	}
	
	/**
	 * 
	 * Displays the vehicles associated with a permit.
	 * 
	 * @param mName the permit holders name
	 */
	private void displayPermitVehicles(String mName) 
	{
		Set<String> vehicles = lnkPermit_list.getVehiclesKeySet(mName);
		
		for(String reg : vehicles)
		{
			Vehicle_info vi = lnkVehicle_list.getVehicle(reg);
			String regNum = vi.getRegNo();
			listModel.addElement(regNum);
		}
		
	}
	
	private void addPermit(String reg, String name, String hostName, int start, int end) 
	{
		boolean success = false;
		Regular_visitor_permit rvp = lnkPermit_list.createRegularVisitorPermit(name, lnkSystem_status.getDateRef(), hostName, start, end);
		if (rvp == null)
		{
			JOptionPane.showMessageDialog(null, "Permit creation failed!");
		}
		else
		{
			success = lnkVehicle_list.addVehicle(reg, rvp);
			if (success)
			{
				nameField.setText("");
				regField.setText("");
				makeField.setText("");
				modelField.setText("");
				colourField.setText("");
				date1Field.setText("");
				hostField.setText("");
				JOptionPane.showMessageDialog(null, "Permit Added succesfully");
			}
			else
			{
				JOptionPane.showMessageDialog(null, "Permit created, vehicle creation failed");
			}
		}
	}
	
	/**
	 * 
	 * Enables or disables the add and remove vehicle buttons on the modify permit tab.
	 * 
	 * @param toggle true or false to enable or disable the buttons
	 */
	private void setVehicleBtns(boolean toggle)
	{
		if(listModel.size() == 0)
		{
			removeVehicleBtn.setEnabled(false);
		}
		
		if(permitType.equalsIgnoreCase("day") && listModel.size() == 1)
		{
			addVehicleBtn.setEnabled(false);
			mRegField.setEditable(false);
			removeVehicleBtn.setEnabled(true);
		}
		else if(permitType.equalsIgnoreCase("day") && listModel.size() == 0)
		{
			addVehicleBtn.setEnabled(true);
			mRegField.setEditable(true);
			removeVehicleBtn.setEnabled(false);
		}
		else
		{
			addVehicleBtn.setEnabled(toggle);
			removeVehicleBtn.setEnabled(toggle);
		}
	}
	
	/**
	 * Sets whether the start and end date buttons and fields will be enabled/editable on the modify permit tab.
	 * 
	 * @param toggle true or false to enable or disable depending on permit type
	 */
	private void setDateBtns(boolean toggle)
	{
		//fields will be filled if it's a regular or day permit
		if(!(mStartDateField.getText().isEmpty() && mEndDateField.getText().isEmpty())) {
			
			if(permitType.equalsIgnoreCase("day") || permitType.equalsIgnoreCase("regular"))
			{
				mStartDateField.setEditable(toggle);
				modifyStartDateBtn.setEnabled(toggle);
				
				if(permitType.equalsIgnoreCase("regular"))
				{
					mEndDateField.setEditable(toggle);
					modifyEndDateBtn.setEnabled(toggle);
				}
			}
		}
		//for all other permits
		else
		{
			mStartDateField.setEditable(toggle);
			modifyStartDateBtn.setEnabled(toggle);
			mEndDateField.setEditable(toggle);
			modifyEndDateBtn.setEnabled(toggle);
		}
	}
	
	/**
	 * Resets the modify tab labels, fields, vehicle list and disables all buttons.
	 */
	private void resetModifyTab()
	{
		mNameLabel.setForeground(Color.black);
		mStartDateLabel.setForeground(Color.black);
		mEndDateLabel.setForeground(Color.black);
		mRegLabel.setForeground(Color.black);
		
		mStartDateField.setText("");
		mEndDateField.setText("");
		mRegField.setText("");
		
		listModel.removeAllElements();
		
		setVehicleBtns(false);
		setDateBtns(false);
	}
	
}