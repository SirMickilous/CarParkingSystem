import java.util.HashSet;
import java.util.Hashtable;
import java.util.Map.Entry;
import java.util.Set;

/* Generated by Together */

/**
 * Permit list manages the collection of permits currently issued and not yet
 * cancelled (or expired). It handles most of the use cases in the
 * Administration section. Note that each Permit must have a unique permit
 * holder name (so a HashTable is probably a good implementation of the
 * collection, with permit holder name as key).
 *
 * There will only be one instance of this class.
 */
public class Permit_list {

	/**
	 * The Permit list maintains a collection of the Permits currently issued.
	 *
	 * This association must be implemented by an attribute holding a collection
	 * data structure (for example: array, hash table - the latter is recommended).
	 *
	 * Note that no two Permits may have the same permit holder name (this
	 * information is not represented diagrammatically).
	 * 
	 * @associates Permit
	 * @label Contains
	 * @clientCardinality 1
	 * @supplierCardinality 0..*
	 * @directed
	 */
	private Hashtable<String, Permit> lnkPermit;

	String name1;
	String name2;
	String name3;
	String name4;
	String host1;
	String host2;
	int dateIssue;
	int dateStart;
	int dateEnd;
	int dateVisit;

	Permit[] dummyPermits;

	public Permit_list(System_status sS) {

		// New Hashtable of all permits in the list
		lnkPermit = new Hashtable<String, Permit>();

		// Dummy instances to load into the system on start up
		name1 = "David Clark";
		name2 = "John Smith"; 
		name3 = "Anne Jones"; 
		name4 = "Jane Black"; 
		host1 = "Prof A";     
		host2 = "Prof B";     
		dateStart = 2;
		dateEnd = 4;
		dateVisit = 7;

		// Permits to be used in the dummy vehicle instances
		dummyPermits = new Permit[4];

		Permanent_visitor_permit permit1 = new Permanent_visitor_permit(name1, sS.getDateRef());
		lnkPermit.put(name1, permit1);
		dummyPermits[0] = permit1;
		University_member_permit permit2 = new University_member_permit(name2, sS.getDateRef());
		lnkPermit.put(name2, permit2);
		dummyPermits[1] = permit2;
		Regular_visitor_permit permit3 = new Regular_visitor_permit(name3, sS.getDateRef(), host1, dateStart, dateEnd);
		lnkPermit.put(name3, permit3);
		dummyPermits[2] = permit3;
		Day_visitor_permit permit4 = new Day_visitor_permit(name4, sS.getDateRef(), host2, dateVisit);
		lnkPermit.put(name4, permit4);
		dummyPermits[3] = permit4;

	}
	
	public Permit_list() {

		// New Hashtable of all permits in the list
		lnkPermit = new Hashtable<String, Permit>();
		
	}

	/**
	 * The checkForPermit method takes a name/key in the form of a String 
	 * and attempts to retrieve the permit from the list, it returns a boolean 
	 * value to indicate if it successfully retrieved a non null value
	 * 
	 * @param String:name		The key/name of the permit holder to check
	 * 
	 * @return boolean			Returns true if that key/name returns a permit and false if it returns nothing 
	 */
	public boolean checkForPermit(String name) {
		if (lnkPermit.get(name) != null)
			return true;
		return false;
	}

	/**
	 * The getPermit method takes a name/key in the form of a String 
	 * and retrieves the permit from the list using the name if there
	 * is no permit a null value is returned.
	 * 
	 * @param String:name		The key/name of the permit holder to retrieve
	 * 
	 * @return Permit			The return Permit if found or null if not 
	 */
	public Permit getPermit(String name) {
		return lnkPermit.get(name);
	}

	/**
	 * The removePermit method takes a name/key in the form of a String 
	 * and retrieves the vehicles keys associated with the permit and 
	 * removes the permit from the list. Returning the Set of registrations 
	 * upon removal.
	 * 
	 * @param String:name		The key/name of the permit holder to remove
	 * 
	 * @return Set<String>		The set of vehicle registration strings associated 
	 * 							with the permit being removed 
	 */
	public Set<String> removePermit(String name) {
		Set<String> rtn = this.getVehiclesKeySet(name);
		lnkPermit.remove(name);
		return rtn;
	}
	
	/**
	 * The removePermit method takes a name/key in the form of a String 
	 * and retrieves the vehicles keys associated with the permit and 
	 * removes the permit from the list. Returning the Set of registrations 
	 * upon removal.
	 * 
	 * @param Set<String>:permitList		The list of keys/names of the permit holders to be removed
	 * 
	 * @return Set<String>					The set of vehicle registration strings associated 
	 * 										with the permits being removed. 
	 */
	public Set<String> removeAllPermits(Set<String> permitList) {
		Set<String> rtn = new HashSet<>();
		for (String p : permitList) {
			rtn.addAll(this.getVehiclesKeySet(p));
			lnkPermit.remove(p);
		}
		
		return rtn;
	}

	// Method used by the main constructor to feed the dummy permit references into the vehicle list constructor
	public Permit[] getAllTestPermits() {
		return dummyPermits;
	}

	/**
	 * The getVehiclesKeySet method takes a name/key in the form of a String 
	 * and retrieves and returns the vehicles keys associated with the permit.
	 *  
	 * @param String:name		The key/name of the permit holder
	 * 
	 * @return Set<String>		The set of vehicle registration strings associated 
	 * 							with the permit being removed 
	 */
	public Set<String> getVehiclesKeySet(String name) {
		return lnkPermit.get(name).getPermittedVehicleKeys();
	}
	
	/**
	 * The createPermanentVisitorPermit method takes a name/key in the form of a String 
	 * and the current date and creates a new Permanent Visitor Permit and adds it to 
	 * the permit list before returning a reference to itself which is used in the instantiation 
	 * of the associated vehicle
	 *  
	 * @param String:name					The key/name of the permit holder
	 * @param Date:currentDate				A reference to the current date held in the system_status class
	 * 
	 * @return Permanent_visitor_permit		A reference to the permit that was created 
	 */
	public Permanent_visitor_permit createPermanentVisitorPermit(String name, Date currentDate) {
		Permanent_visitor_permit permit = new Permanent_visitor_permit(name, currentDate);		
		lnkPermit.put(name, permit);
		return permit;		
	}
	
	/**
	 * The createUniversityMemberPermit method takes a name/key in the form of a String 
	 * and the current date and creates a new University Member Permit and adds it to 
	 * the permit list before returning a reference to itself which is used in the instantiation 
	 * of the associated vehicle
	 *  
	 * @param String:name					The key/name of the permit holder
	 * @param Date:currentDate				A reference to the current date held in the system_status class
	 * 
	 * @return University_member_permit		A reference to the permit that was created 
	 */
	public University_member_permit createUniversityMemberPermit(String name, Date currentDate) {
		University_member_permit permit = new University_member_permit(name, currentDate);
		lnkPermit.put(name, permit);
		return permit;
	}
	
	/**
	 * The createRegularVisitorPermit method takes a name/key in the form of a String 
	 * and the current date and creates a new Regular Visitor Permit and adds it to 
	 * the permit list before returning a reference to itself which is used in the instantiation 
	 * of the associated vehicle
	 *  
	 * @param String:	name				The key/name of the permit holder
	 * @param Date:		currentDate			A reference to the current date held in the system_status class
	 * @param String:	hostName			The name of the host sponsor of the permit
	 * @param int:		dateStart			The start date of the permit
	 * @param int:		dateEnd				The end date of the permit
	 * 
	 * @return Regular_visitor_permit	A reference to the permit that was created 
	 */
	public Regular_visitor_permit createRegularVisitorPermit(String name, Date currentDate, String hostName, int dateStart, int dateEnd) {
		Regular_visitor_permit permit = new Regular_visitor_permit(name, currentDate, hostName, dateStart, dateEnd);
		lnkPermit.put(name, permit);
		return permit;
	}

	/**
	 * The createDayVisitorPermit method takes a name/key in the form of a String 
	 * and the current date and creates a new Day Visitor Permit and adds it to 
	 * the permit list before returning a reference to itself which is used in the instantiation 
	 * of the associated vehicle
	 *  
	 * @param String:	name				The key/name of the permit holder
	 * @param Date:		currentDate			A reference to the current date held in the system_status class
	 * @param String:	hostName			The name of the host sponsor of the permit
	 * @param int:		dateVisit			The visit date of the permit
	 * 
	 * @return Day_visitor_permit			A reference to the permit that was created 
	 */
	public Day_visitor_permit createDayVisitorPermit(String name, Date currentDate, String hostName, int dateVisit) {
		Day_visitor_permit permit = new Day_visitor_permit(name, currentDate, hostName, dateVisit);
		lnkPermit.put(name, permit);
		return permit;
	}

	/**
	 * The aNewDay method can be called to iterate through the permit list and 
	 * call the permits newDayUpdate which will in turn check the date and set 
	 * whether a permit can be used on this day. 
	 */
	public void aNewDay() {
		for (Entry<String, Permit> e : lnkPermit.entrySet())
			e.getValue().newDayUpdate(); // calls an update method in each permit to update it's status based on the current date.
	}

	/**
	 * The aNewYear method can be called to iterate through the permit list and 
	 * call either, call the permits newYearUpdate which will in turn perform 
	 * annual maintenance on the permit, or it will add the permits name/key 
	 * to the return set of strings if that permit is an instance of Day or 
	 * Regular visitor permit
	 * 
	 * @return Set<String>		A Set of all permit names/keys which need to be removed from the permit list 
	 */
	public Set<String> aNewYear() {

		Set<String> rtn = new HashSet<>(); // List of permits which have been selected for removal
		 
		for (Entry<String, Permit> e : lnkPermit.entrySet()) {

			if (e.getValue() instanceof Day_visitor_permit == true) {
				rtn.add(e.getKey());				
			}
			if (e.getValue() instanceof Regular_visitor_permit == true) {
				rtn.add(e.getKey());
			}
			if (e.getValue() instanceof University_member_permit == true) {				
				e.getValue().newYearUpdate();
			}
			if (e.getValue() instanceof Permanent_visitor_permit == true) {
				e.getValue().newYearUpdate();
			}
		}
		return rtn;
	}
}