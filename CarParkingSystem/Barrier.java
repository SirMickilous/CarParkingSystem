import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;

/* Generated by Together */

/**
 * This class represents the access control barriers. Information about the
 * barrier functions is in the Barrier use case diagram (hyperlinked from this
 * class). Although in reality this class will be realised by (programmable)
 * hardware with a moveable barrier, and a camera with a registration number
 * recognition system, here the interface comprises one screen with the various
 * functions present on it, all on view at once since there aren't many.
 *
 * There will be a large word PASS or STOP on display at all times: PASS when
 * the barrier is up because the system is inactive or temporarily when a
 * permitted vehicle is being allowed through, and STOP when the barrier is
 * down.
 *
 * There will be a text field to enter the registration number read by the
 * camera, and a button to indicate that the number has been read and is ready
 * for checking (and raising the barrier or not, as appropriate).
 *
 * To simulate the passage of a vehicle through the raised barrier, there is
 * another button to be clicked to simulate when a buried electronic sensor
 * indicates that the vehicle is now clear - the barrier can then be lowered
 * (unless, of course, the system has been deactivated by security staff in the
 * interim...).
 *
 * There could be many instances of this class: one at each entrance lane to the
 * University. The class implements Observer, and observes the system status so
 * that it can keep its activated/deactivated status up to date.
 * 
 * @stereotype boundary
 */
@SuppressWarnings("deprecation")
public class Barrier extends JFrame implements Observer
{
	/**
	 * Each instance of Barrier has a navigable association to the permit list so
	 * that when a vehicle's registration number has been recognized by the camera,
	 * the barrier can check whether to raise itself or not by checking the status
	 * of that vehicle's permit.
	 * 
	 * @clientCardinality 1..*
	 * @supplierCardinality 1
	 * @label Access permits
	 * @directed
	 */
	private Vehicle_list lnkVehicle_list;

	/**
	 * Each instance of Barrier has a navigable association to the system status so
	 * that it can check whether the barrier system as a whole is active or
	 * inactive, and so that it can send event messages to be recorded in the log.
	 * 
	 * @clientCardinality 1..*
	 * @supplierCardinality 1
	 * @label Fetch system status info
	 * @directed
	 */
	private System_status lnkSystem_status;

	/**
	 * This attribute indicates the active/inactive state of the barrier system - as
	 * notified by the system status when it changes (Barrier Observes System
	 * status). If false then the barrier must be up. If true then the barrier
	 * position is determined by attribute raised.
	 */
	private boolean active = false;

	/**
	 * If the barrier system is active, this attribute indicates whether the barrier
	 * is currently in its raised or lowered position. The position is controlled by
	 * the result of checking a registration number with the permitted vehicles
	 * list, and the "vehicle clear" button.
	 */
	private boolean raised = true;
	private boolean vehicleWaiting = false;

	// non auto generated variables start here

	int barrierX;
	int barrierY;

	String title;
	String reg;

	private JTextField regField;
	private JButton submitBtn;
	private JButton vehicleBtn;
	private JLabel barrierStatus;

	private boolean barrierUp = true;

	public Barrier(System_status lnkSystem_status, Vehicle_list lnkVehicle_list, int Instance)
	{
		// set global params to locals passed in
		this.lnkSystem_status = lnkSystem_status;
		this.lnkVehicle_list = lnkVehicle_list;

		switch (Instance)
		{
		case 1:
			barrierX = 350;
			barrierY = 550;
			break;
		case 2:
			barrierX = 800;
			barrierY = 550;
			break;
		case 3:
			barrierX = 350;
			barrierY = 750;
			break;
		case 4:
			barrierX = 800;
			barrierY = 750;
			break;
		}

		lnkSystem_status.addObserver(this);

		initializeGUI();
	}

	private void initializeGUI()
	{
		// set up JFrame
		title = "Barrier |\t\t Date: " + lnkSystem_status.getDate();
		setTitle(title);
		setLocation(barrierX, barrierY); // centres the frame on screen
		setSize(400, 150);
		setDefaultCloseOperation(EXIT_ON_CLOSE);// can adding this line be normalised please?
		setResizable(false);
		Container window = getContentPane();
		window.setLayout(new FlowLayout());
		window.setBackground(Color.LIGHT_GRAY);

		// start setting the stuffs up to be added to the frame

		// i don't agree with the way i'm doing this, id rather use a JPanel but this is
		// the lazy mans way
		window.add(new JLabel("Enter Registration"));

		barrierStatus = new JLabel("Barrier is up: GO! ");
		
		regField = new JTextField();
		regField.setPreferredSize(new Dimension(200, 24));
		regField.setText("");
		regField.setBackground(Color.white);

		submitBtn = new JButton("Submit");
		submitBtn.setPreferredSize(new Dimension(100, 24));
		submitBtn.setBackground(Color.black);
		submitBtn.setForeground(Color.white);
		submitBtn.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent arg0)
			{
				
				//the system must be active in order to enter this multi stage check for the vehicle
				if (lnkSystem_status.getSystemStatus() == true)
				{
					if(vehicleWaiting == false) 
					{//if there is no vehicle currently waiting to drive through the barrier then:
						
						reg = regField.getText(); // set the reg we want to check to that which was in the field
						//TODO validation (possibly regular expression) for a registration plate

						if (lnkVehicle_list.getVehicle(reg) == null)
						{
							regField.setText("Vehicle not found");
						}
						else if (lnkVehicle_list.getVehicle(reg).getPermit() == null)
						{
							regField.setText("No permit found for vehicle");
						}
						else if (lnkVehicle_list.getVehicle(reg).getPermit().isPermitted() == false)
						{
							regField.setText("Entry not permitted on day: " + lnkSystem_status.getDate());
						}
						else if (lnkVehicle_list.getVehicle(reg).getPermit().hasEntered() == true)
						{
							regField.setText("Permit already in use for day: " + lnkSystem_status.getDate());
						}
						else if(lnkVehicle_list.getVehicle(reg).getPermit().getWarnings() == 3)
						{
							regField.setText("Entry Denied: Too many warnings");
						}
						else
						{
							regField.setText("Barrier raised");
							barrierStatus.setText("Barrier is up: GO!");
							raised = true;
							vehicleWaiting = true;
							lnkVehicle_list.getVehicle(reg).getPermit().addEntry();
							
						}
					}
					else 
					{
						regField.setText("Cannot enter: Vehicle waiting");
					}
					
				}
				else 
				{
					regField.setText("Barrier system inactive");
				}
			}
		});

		vehicleBtn = new JButton("Vehicle Clear");
		vehicleBtn.setPreferredSize(new Dimension(150, 24));
		vehicleBtn.setBackground(Color.black);
		vehicleBtn.setForeground(Color.white);
		vehicleBtn.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent arg0)
			{
				if(raised && lnkSystem_status.getSystemStatus() == true) 
				{
					 raised = !raised;
					 vehicleWaiting = !vehicleWaiting;
					 regField.setText("Vehicle Clear");
					 barrierStatus.setText("Barrier is down: STOP!");
					 lnkVehicle_list.getVehicle(reg).getPermit().setEntered(true);
					 lnkSystem_status.addToLog(reg);
				}
			}
			
		});
		
		// add the set up components to the pane
		window.add(regField);
		window.add(submitBtn);
		window.add(vehicleBtn);
		window.add(barrierStatus);

		// last thing make it visible, what use is a GUI we can't see!
		setVisible(true);
	}

	@Override
	public void update(Observable arg0, Object arg1)
	{
		int dayNumber = lnkSystem_status.getDate();
		title = "Barrier |\t\t Date: " + dayNumber;
		setTitle(title);

		if(lnkSystem_status.getSystemStatus() == true) 
		{
			if(vehicleWaiting) 
			{
				raised = true;
				regField.setText("Vehicle Waiting: Barrier Raised");
				barrierStatus.setText("Barrier is up: GO!");
			}
			else 
			{
				raised = false;
				regField.setText("");
				barrierStatus.setText("Barrier is down: STOP!");
			}
			
		}
		else 
		{
			raised = true;
			regField.setText("");
			barrierStatus.setText("Barrier is up: GO!");
		}
	}
}
